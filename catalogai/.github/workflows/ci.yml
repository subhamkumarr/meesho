name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with ruff
      working-directory: ./backend
      run: |
        pip install ruff
        ruff check .
    
    - name: Type check with mypy
      working-directory: ./backend
      run: |
        pip install mypy
        mypy app --ignore-missing-imports || true
    
    - name: Test with pytest
      working-directory: ./backend
      run: |
        pytest -v --tb=short
      env:
        DB_URL: sqlite:///test.db
        THRESH_AUTH: 0.15
        THRESH_SYN: 0.70
        MAX_IMAGE_MB: 8
        LOG_LEVEL: INFO

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Lint with ESLint
      working-directory: ./frontend
      run: npm run lint
    
    - name: Type check with TypeScript
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_BASE: http://localhost:8000

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: catalogai-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: catalogai-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services with Docker Compose
      working-directory: ./ops
      run: |
        docker compose up -d --build
        
        # Wait for services to be ready
        echo "Waiting for backend..."
        for i in {1..30}; do
          if curl -s http://localhost:8000/health/ > /dev/null; then
            echo "Backend is ready"
            break
          fi
          sleep 2
        done
        
        echo "Waiting for frontend..."
        for i in {1..30}; do
          if curl -s http://localhost:3000/ > /dev/null; then
            echo "Frontend is ready"
            break
          fi
          sleep 2
        done
    
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health/
        
        # Test API documentation
        curl -f http://localhost:8000/docs
        
        # Test frontend
        curl -f http://localhost:3000/
    
    - name: Stop services
      working-directory: ./ops
      if: always()
      run: docker compose down -v

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'